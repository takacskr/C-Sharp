@page "/counter"
@using Dapper
@using MySql.Data.MySqlClient
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<h1>Users</h1>

@if (loaded)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (User user in users)
            {
                <tr>
                    <td>@user.name</td>
                    <td>@user.email</td>
                    <td>@user.phone</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button @onclick="IncrementPageDown" class="btn btn-primary">Previous Page</button>
<button @onclick="IncrementPage" class="btn btn-primary">Next Page</button>

@code
{
    // Add MySQL connection related properties
    private MySqlConnection dbConnection;
    private readonly string connectionString = "Server=localhost;Database=testdb;User=root;Password=1234;Port=3306;";

    public List<User> users = null;
    public bool loaded = false;

    public int currentPage = 0;
    public int pageCount = 5;
    public int itemsPerPage = 3;

    // Initialization method
    protected override async Task OnInitializedAsync()
    {
        // Initialize MySQL connection
        dbConnection = new MySqlConnection(connectionString);
        await dbConnection.OpenAsync(); // You may want to handle exceptions here

        await RefreshPage();
    }

    private async Task RefreshPage()
    {
        users = (await dbConnection.QueryAsync<User>(
            "SELECT * FROM users ORDER BY name ASC LIMIT @start, @items",
            new { start = currentPage * itemsPerPage, items = itemsPerPage }
        )).ToList();

        loaded = true;

        StateHasChanged();
    }

    private void IncrementPageDown()
    {
        currentPage--;
        currentPage = Math.Clamp(currentPage, 0, pageCount);

        RefreshPage();
    }

    private void IncrementPage()
    {
        currentPage++;
        currentPage = Math.Clamp(currentPage, 0, pageCount);

        RefreshPage();
    }

    private async Task DeleteUser(User user)
    {
        await dbConnection.ExecuteAsync("DELETE FROM users WHERE id = @Id", new { Id = user.id });
        await RefreshPage();
    }

    // Dispose method to close the connection when the component is disposed
    public void Dispose()
    {
        dbConnection?.Dispose();
    }

    public class User
    {
        public int id;
        public string name;
        public string email;
        public string phone;
    }
}
