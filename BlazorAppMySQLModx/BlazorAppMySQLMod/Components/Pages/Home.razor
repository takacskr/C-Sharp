@page "/"
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<button
    type="button"
    class="btn btn-primary"
    @onclick='() => { ShowAlert("Test alert"); }'>
    Click me for the alert!
</button>

@code {
    public void ShowAlert(string msg)
    {
        JSRuntime.InvokeVoidAsync("alert", msg);
    }
}

<h1>Drag and Drop Example</h1>

@if (currentDropZone == null)
{
    <div class="draggable"
        @ondragstart="StartDrag"
        @ondragend="EndDrag"
        draggable="true">
        Drag me!
    </div>
}

@if (isLoaded)
{
    @foreach (DropZone dz in dropZones)
    {
        <div @ondragenter="() => { EnterDropZone(dz); }"
             @ondragleave="() => { ExitDropZone(dz); }"
             style="background-color: @dz.color;"
             class="dropZone">
            @dz.name
        </div>

        @if (currentDropZone == dz)
        {
            <div class="draggable"
                @ondragstart="StartDrag"
                @ondragend="EndDrag"
                draggable="true">
                Drag me!
            </div>
        }
    }
}

@code {
    public bool isLoaded = false;

    public bool isDragging = false;
    public List<DropZone> dropZones = new List<DropZone>();

    public DropZone? currentDropZone = null;

    protected override async Task OnInitializedAsync()
    {
        dropZones.Add(new DropZone("name one", "red"));
        dropZones.Add(new DropZone("name two", "yellow"));
        dropZones.Add(new DropZone("name three", "pink"));

        await Task.Delay(1500);
        isLoaded = true;
    }

    public void StartDrag()
    {
        isDragging = true;
    }

    public void EndDrag()
    {
        isDragging = false;
        DropZone? dropTarget = null;

        foreach (DropZone dz in dropZones)
            if (dz.isDraggingOver)
                dropTarget = dz;

        if (dropTarget != null)
        {
            currentDropZone = dropTarget;
            //ShowAlert(dropTarget.name);
        }
        else
        {
            currentDropZone = null;
        }
    }

    public void EnterDropZone(DropZone target)
    {
        if (!isDragging)
            return;

        target.DraggingEnter();
    }

    public void ExitDropZone(DropZone target)
    {
        if (!isDragging)
            return;

        target.DraggingExit();
    }

    public class DropZone
    {
        public string name = "undefined";
        public string color = "red";
        private string originalColor = "";

        public bool isDraggingOver = false;

        public DropZone(string name, string color)
        {
            this.name = name;
            this.color = color;

            originalColor = color;
        }

        public void DraggingEnter()
        {
            color = "green";
            isDraggingOver = true;
        }

        public async Task DraggingExit()
        {
            color = originalColor;

            await Task.Delay(10);

            isDraggingOver = false;
        }
    }
}